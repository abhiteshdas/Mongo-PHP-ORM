#!/bin/env spartan-test

; $T=M::Typed();
$T->type["aip"]; // array of IP class
#=["array","ip"]

; $T->remove([]); // clean up 
; $T->insert(["_id" => 1000]);
; $t=$T(1000);

// Can't assign scalar to array elements!!
$t->aip = "scalar";
#=["InvalidArgumentException","trying to set scalar to array field test.typed.aip",0]

; $t->add("aip", "192.168.0.1", 3232235778, '10.0.0.1', '4.4.4.4');

$t->aip;
#=[3232235521,3232235778,167772161,67372036]

// MAGIC Field - human reabable presentation
// Type: "aip"
$t->_aip;
#=["192.168.0.1","192.168.1.2","10.0.0.1","4.4.4.4"]
$t["_aip"];
#=["192.168.0.1","192.168.1.2","10.0.0.1","4.4.4.4"]
$t->_aip[1];
#="192.168.1.2"

$t["aip.1"];
#=3232235778
$t->{"aip.1"};
#=3232235778


// aip is array of type
$t["_aip.0"];
#="192.168.0.1"

// !! UNLESS it is exlplicitely defined !!
$t["_aip.1"];
#="192.168.1.2"

// Specially defined type for "aip.2" will always work for direct saves / reads
$t["_aip.2"];
#="10.0.0.1"

// loaded data dump
$t->_;
#={"_id":1000,"aip":[3232235521,3232235778,167772161,67372036]}

// data dump in human representation
$t->__;
#={"_id":"1,000","aip":["192.168.0.1","192.168.1.2","10.0.0.1","4.4.4.4"]}
