#!/bin/env spartan-test
<?

// TypedCollection magic fields query support

; $T = M::Typed();  // typed collection
; $T->reset();      // drop all data, reset sequence
$T->type["ph"];     // field "ph" have type "phone"
#="phone"

// prepare data
; $T->insert(["ph" => "(617) 372-0000"]);
; $T->insert(["ph" => "7 495 726-0000"]);
; $T->insert(["ph" => "+49 221 828 1234"]);

// query all phone fields
$T->f(['ph' => ['$exists' => true]], "ph");
#={"1":{"_id":1,"ph":16173720000},"2":{"_id":2,"ph":74957260000},"3":{"_id":3,"ph":492218281234}}
// Find as Objects - Object List
; $ol = $T->fo(['ph' => ['$exists' => true]], "ph");

// magic field get = human-readable representation of field
$ol[1]->_ph;
#="(617)372-0000"
$ol[2]->_ph;
#="+7 495-726-0000"
$ol[3]->_ph;
#="+49 221-828-1234"

// Magic
$T->fm([], "_ph");
#={"1":{"_id":1,"ph":16173720000,"_ph":"(617)372-0000"},"2":{"_id":2,"ph":74957260000,"_ph":"+7 495-726-0000"},"3":{"_id":3,"ph":492218281234,"_ph":"+49 221-828-1234"}}

// fm will throw exceptions
// 1. field list must be sting
$T->fm([], []);
#=["InvalidArgumentException","field list must be string",0]

// 2. you should query something magic
$T->fm([], "ph");
#=["InvalidArgumentException","no magic fields in queried",0]

